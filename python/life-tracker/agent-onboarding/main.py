"""
Life Tracker - Agente de Onboarding
Aplica√ß√£o principal com suporte ao framework Agno
"""

import json
import logging
import sys
from typing import Dict, List, Optional, Any
from datetime import datetime

from fastapi import FastAPI, HTTPException, BackgroundTasks, Request
from fastapi.responses import RedirectResponse
from pydantic import BaseModel, Field
from dotenv import load_dotenv

# Configurar paths antes de qualquer import
from utils.path_config import setup_project_paths
setup_project_paths(__file__)

from core.agno_agent import AgnoOnboardingAgent
from core.agent import OnboardingAgent
from models.schemas import (
    OnboardingRequest,
    OnboardingResponse,
    ProfileAnalysis,
    GeneratedPlan
)
from services.database import DatabaseService
from services.api_client import APIClient
from utils.config import Settings
from routes import onboarding_router, health_router

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Carregar vari√°veis de ambiente
load_dotenv()

# Configura√ß√µes da aplica√ß√£o
APP_VERSION = "2.0.0"
APP_NAME = "Life Tracker - Agente de Onboarding"
APP_DESCRIPTION = """
# Life Tracker - Agente de Onboarding

Sistema inteligente de onboarding que utiliza o framework Agno para criar planos personalizados de desenvolvimento pessoal.

## üöÄ Funcionalidades

- **An√°lise de Perfil**: Identifica o tipo de perfil do usu√°rio baseado nas respostas do question√°rio
- **Gera√ß√£o de Planos**: Cria planos personalizados com rotinas, h√°bitos e objetivos
- **Mem√≥ria Inteligente**: Utiliza o framework Agno para manter contexto e melhorar recomenda√ß√µes
- **Templates**: Sistema de templates para diferentes focos (sa√∫de, finan√ßas, produtividade)

## üîß Tecnologias

- **FastAPI**: Framework web moderno e r√°pido
- **Agno Framework**: Sistema de mem√≥ria e agentes inteligentes
- **PostgreSQL**: Banco de dados principal
- **Pydantic**: Valida√ß√£o de dados e serializa√ß√£o

## üìö Endpoints Principais

### Onboarding
- `POST /onboarding/complete` - Processo completo de onboarding
- `POST /onboarding/analyze-profile` - An√°lise de perfil
- `POST /onboarding/generate-plan` - Gera√ß√£o de plano personalizado

### Usu√°rios
- `GET /onboarding/user/{user_id}/plan` - Recuperar plano do usu√°rio
- `GET /onboarding/user/{user_id}/profile` - Recuperar perfil do usu√°rio
- `GET /onboarding/user/{user_id}/recommendations` - Obter recomenda√ß√µes

### Sistema
- `GET /health` - Verifica√ß√£o de sa√∫de
- `GET /onboarding/status` - Status do servi√ßo

## üîê Autentica√ß√£o

Atualmente o sistema n√£o requer autentica√ß√£o, mas est√° preparado para implementa√ß√£o futura.

## üìñ Documenta√ß√£o

- **Swagger UI**: `/docs`
- **ReDoc**: `/redoc`
- **OpenAPI JSON**: `/openapi.json`
"""

# Criar aplica√ß√£o FastAPI
app = FastAPI(
    title=APP_NAME,
    description=APP_DESCRIPTION,
    version=APP_VERSION,
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json",
    contact={
        "name": "Life Tracker Team",
        "email": "dev@lifetracker.com",
    },
    license_info={
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT",
    },
    servers=[
        {
            "url": "http://0.0.0.0:8000",
            "description": "Servidor de Desenvolvimento"
        },
        {
            "url": "https://backend-monorepo-production.up.railway.app",
            "description": "Servidor de Produ√ß√£o"
        }
    ],
    tags_metadata=[
        {
            "name": "onboarding",
            "description": "Opera√ß√µes relacionadas ao processo de onboarding de usu√°rios. Inclui an√°lise de perfil, gera√ß√£o de planos e gerenciamento de templates.",
        },
        {
            "name": "health",
            "description": "Endpoints de verifica√ß√£o de sa√∫de da aplica√ß√£o. Usados para monitoramento e load balancing.",
        },
    ]
)

# Vari√°veis globais para agentes
agno_agent = None
legacy_agent = None

@app.on_event("startup")
async def startup_event():
    """Evento de inicializa√ß√£o da aplica√ß√£o"""
    global agno_agent, legacy_agent
    
    logger.info(f"Iniciando {APP_NAME} v{APP_VERSION}")
    
    try:
        # Inicializar agentes
        agno_agent = AgnoOnboardingAgent()
        await agno_agent.initialize()
        logger.info("‚úì Agente Agno inicializado")
        
        legacy_agent = OnboardingAgent()
        await legacy_agent.initialize()
        logger.info("‚úì Agente legado inicializado")
        
        logger.info("‚úÖ Aplica√ß√£o inicializada com sucesso")
        
    except Exception as e:
        logger.error(f"‚ùå Erro na inicializa√ß√£o: {str(e)}")
        raise

# Incluir rotas organizadas
app.include_router(health_router)
app.include_router(onboarding_router)

# Endpoint raiz
@app.get("/")
async def root():
    """Endpoint raiz da aplica√ß√£o"""
    return {
        "app": APP_NAME,
        "version": APP_VERSION,
        "status": "running",
        "timestamp": datetime.now().isoformat(),
        "endpoints": {
            "docs": "/docs",
            "health": "/health",
            "onboarding": "/onboarding",
            "legacy": "Endpoints legados com redirecionamento autom√°tico"
        }
    }

# Endpoints de compatibilidade (redirecionamento)
@app.post("/complete-onboarding", response_model=OnboardingResponse)
async def complete_onboarding_legacy(request: OnboardingRequest, background_tasks: BackgroundTasks):
    """Endpoint legado - redireciona para novo endpoint"""
    logger.warning(f"Endpoint legado /complete-onboarding usado - redirecionando para /onboarding/complete")
    return RedirectResponse(url="/onboarding/complete", status_code=307)

@app.post("/analyze-profile", response_model=ProfileAnalysis)
async def analyze_profile_legacy(request: OnboardingRequest):
    """Endpoint legado - redireciona para novo endpoint"""
    logger.warning(f"Endpoint legado /analyze-profile usado - redirecionando para /onboarding/analyze-profile")
    return RedirectResponse(url="/onboarding/analyze-profile", status_code=307)

@app.post("/generate-plan", response_model=GeneratedPlan)
async def generate_plan_legacy(request: OnboardingRequest, background_tasks: BackgroundTasks):
    """Endpoint legado - redireciona para novo endpoint"""
    logger.warning(f"Endpoint legado /generate-plan usado - redirecionando para /onboarding/generate-plan")
    return RedirectResponse(url="/onboarding/generate-plan", status_code=307)

@app.get("/templates")
async def templates_legacy():
    """Endpoint legado - redireciona para novo endpoint"""
    logger.warning(f"Endpoint legado /templates usado - redirecionando para /onboarding/templates")
    return RedirectResponse(url="/onboarding/templates", status_code=307)

@app.get("/user/{user_id}/plan")
async def user_plan_legacy(user_id: str):
    """Endpoint legado - redireciona para novo endpoint"""
    logger.warning(f"Endpoint legado /user/{user_id}/plan usado - redirecionando para /onboarding/user/{user_id}/plan")
    return RedirectResponse(url=f"/onboarding/user/{user_id}/plan", status_code=307)

if __name__ == "__main__":
    import uvicorn
    
    logger.info("Iniciando servidor de desenvolvimento...")
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )









