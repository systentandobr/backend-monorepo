"""
Rotas principais de onboarding
Implementa칞칚o com suporte ao agente Agno
"""

import logging
from typing import Dict, Any, Optional
from datetime import datetime

from fastapi import APIRouter, HTTPException, BackgroundTasks, Depends
from pydantic import BaseModel

from core.agno_agent import AgnoOnboardingAgent
from core.agent import OnboardingAgent
from models.schemas import (
    OnboardingRequest,
    OnboardingResponse,
    ProfileAnalysis,
    GeneratedPlan,
    LifeDomain
)
from services.database import DatabaseService
from services.api_client import APIClient
from utils.config import Settings

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/onboarding", tags=["onboarding"])

# Depend칡ncias
def get_agno_agent() -> AgnoOnboardingAgent:
    """Dependency para obter o agente Agno"""
    return AgnoOnboardingAgent()

def get_legacy_agent() -> OnboardingAgent:
    """Dependency para obter o agente legado"""
    return OnboardingAgent()

def get_db_service() -> DatabaseService:
    """Dependency para obter o servi칞o de banco de dados"""
    return DatabaseService()

def get_api_client() -> APIClient:
    """Dependency para obter o cliente de API"""
    return APIClient()

# Modelos de request
class AgnoOnboardingRequest(BaseModel):
    """Request para onboarding com Agno"""
    user_id: str
    answers: Dict[str, Any]
    use_memory: bool = True
    enable_agentic: bool = True

class MemoryQueryRequest(BaseModel):
    """Request para consulta de mem칩ria"""
    user_id: str
    query: Optional[str] = None
    limit: int = 10

# Rotas principais
@router.post("/complete", response_model=OnboardingResponse)
async def complete_onboarding_process(
    request: OnboardingRequest,
    background_tasks: BackgroundTasks,
    agno_agent: AgnoOnboardingAgent = Depends(get_agno_agent),
    api_client: APIClient = Depends(get_api_client)
):
    """
    Completa todo o processo de onboarding usando o agente Agno
    
    Este endpoint executa o processo completo de onboarding:
    1. An치lise do perfil do usu치rio
    2. Gera칞칚o de plano personalizado
    3. Envio para API principal (em background)
    
    **Par칙metros:**
    - **request**: Dados do usu치rio e respostas do question치rio
    - **background_tasks**: Tarefas em background para envio de dados
    
    **Retorna:**
    - **OnboardingResponse**: Resultado completo do processo
    
    **Exemplo de uso:**
    ```json
    {
        "user_id": "user123",
        "answers": {
            "age": 30,
            "goals": ["health", "productivity"],
            "time_availability": 60
        }
    }
    ```
    """
    try:
        logger.info(f"Completando onboarding com Agno para usu치rio: {request.user_id}")
        
        # Executar processo completo usando o agente Agno
        result = await agno_agent.process_onboarding(
            user_id=request.user_id,
            answers=request.answers
        )
        
        # Enviar plano para API principal (background task)
        if result.success and result.generated_plan:
            background_tasks.add_task(
                api_client.send_user_plan,
                user_id=request.user_id,
                plan=result.generated_plan
            )
        
        return result
        
    except Exception as e:
        logger.error(f"Erro no onboarding com Agno: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/complete-legacy", response_model=OnboardingResponse)
async def complete_onboarding_process_legacy(
    request: OnboardingRequest,
    background_tasks: BackgroundTasks,
    legacy_agent: OnboardingAgent = Depends(get_legacy_agent),
    api_client: APIClient = Depends(get_api_client)
):
    """
    Completa o processo de onboarding usando o agente legado
    
    **丘멆잺 DEPRECATED**: Use `/complete` para o novo agente Agno
    
    Este endpoint usa o sistema legado de onboarding.
    
    **Par칙metros:**
    - **request**: Dados do usu치rio e respostas do question치rio
    - **background_tasks**: Tarefas em background para envio de dados
    
    **Retorna:**
    - **OnboardingResponse**: Resultado do processo legado
    """
    try:
        logger.info(f"Completando onboarding legado para usu치rio: {request.user_id}")
        
        # Executar processo completo usando o agente legado
        result = await legacy_agent.process_onboarding(
            user_id=request.user_id,
            answers=request.answers
        )
        
        # Enviar plano para API principal (background task)
        if result.success and result.generated_plan:
            background_tasks.add_task(
                api_client.send_user_plan,
                user_id=request.user_id,
                plan=result.generated_plan
            )
        
        return result
        
    except Exception as e:
        logger.error(f"Erro no onboarding legado: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/analyze-profile", response_model=ProfileAnalysis)
async def analyze_user_profile(
    request: OnboardingRequest,
    agno_agent: AgnoOnboardingAgent = Depends(get_agno_agent),
    db_service: DatabaseService = Depends(get_db_service)
):
    """
    Analisa as respostas do onboarding e identifica o perfil do usu치rio usando Agno
    
    Este endpoint analisa as respostas do question치rio de onboarding para:
    - Identificar o tipo de perfil do usu치rio
    - Determinar prioridades por dom칤nio da vida
    - Gerar insights e recomenda칞칫es
    - Calcular score de an치lise e n칤vel de confian칞a
    
    **Par칙metros:**
    - **request**: Dados do usu치rio e respostas do question치rio
    
    **Retorna:**
    - **ProfileAnalysis**: An치lise detalhada do perfil com insights
    
    **Exemplo de resposta:**
    ```json
    {
        "user_id": "user123",
        "profile": {
            "user_id": "user123",
            "profile_type": "health_focused",
            "age": 30,
            "primary_concerns": ["stress", "sleep"]
        },
        "domain_priorities": {
            "healthness": 0.8,
            "productivity": 0.6
        },
        "key_insights": ["Usu치rio com foco em sa칰de", "Necessita melhorar sono"],
        "analysis_score": 85.5,
        "confidence_level": 92.0
    }
    ```
    """
    try:
        logger.info(f"Analisando perfil com Agno para usu치rio: {request.user_id}")
        
        # Analisar perfil usando Agno
        profile_analysis = await agno_agent.analyze_profile_only(
            user_id=request.user_id,
            answers=request.answers
        )
        
        return profile_analysis
        
    except Exception as e:
        logger.error(f"Erro ao analisar perfil com Agno: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/generate-plan", response_model=GeneratedPlan)
async def generate_personalized_plan(
    request: OnboardingRequest,
    background_tasks: BackgroundTasks,
    agno_agent: AgnoOnboardingAgent = Depends(get_agno_agent),
    api_client: APIClient = Depends(get_api_client)
):
    """
    Gera um plano personalizado baseado no perfil do usu치rio usando Agno
    
    Este endpoint gera um plano completo de desenvolvimento pessoal:
    1. Analisa o perfil do usu치rio
    2. Seleciona template mais adequado
    3. Personaliza o plano com base nas respostas
    4. Envia para API principal (em background)
    
    **Par칙metros:**
    - **request**: Dados do usu치rio e respostas do question치rio
    - **background_tasks**: Tarefas em background para envio de dados
    
    **Retorna:**
    - **GeneratedPlan**: Plano personalizado com rotinas, h치bitos e objetivos
    
    **Exemplo de resposta:**
    ```json
    {
        "user_id": "user123",
        "plan": {
            "routines": [
                {
                    "time": "07:00",
                    "activity": "Medita칞칚o matinal",
                    "domain": "healthness",
                    "duration_minutes": 15
                }
            ],
            "habits": [
                {
                    "id": "habit1",
                    "name": "Beber 치gua",
                    "icon": "游눦",
                    "color": "#4CAF50",
                    "description": "Beber 8 copos de 치gua por dia",
                    "target": "Di치rio",
                    "timeOfDay": "all"
                }
            ]
        },
        "success": true,
        "message": "Plano gerado com sucesso"
    }
    ```
    """
    try:
        logger.info(f"Gerando plano com Agno para usu치rio: {request.user_id}")
        
        # Analisar perfil primeiro
        profile_analysis = await agno_agent.analyze_profile_only(
            user_id=request.user_id,
            answers=request.answers
        )
        
        # Gerar plano a partir da an치lise
        personalized_plan = await agno_agent.generate_plan_from_analysis(
            user_id=request.user_id,
            profile_analysis=profile_analysis
        )
        
        # Enviar plano para API principal (background task)
        background_tasks.add_task(
            api_client.send_user_plan,
            user_id=request.user_id,
            plan=personalized_plan
        )
        
        return personalized_plan
        
    except Exception as e:
        logger.error(f"Erro ao gerar plano com Agno: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/templates")
async def list_available_templates(
    legacy_agent: OnboardingAgent = Depends(get_legacy_agent)
):
    """
    Lista todos os templates dispon칤veis para onboarding
    
    Este endpoint retorna todos os templates de planos dispon칤veis no sistema,
    incluindo templates focados em sa칰de, finan칞as, produtividade, etc.
    
    **Retorna:**
    - **templates**: Lista de todos os templates dispon칤veis
    - **count**: N칰mero total de templates
    
    **Exemplo de resposta:**
    ```json
    {
        "templates": [
            {
                "id": "health_focused",
                "name": "Foco em Sa칰de",
                "description": "Template para melhorar sa칰de e bem-estar",
                "domains": ["healthness", "productivity"]
            },
            {
                "id": "financial_focused", 
                "name": "Foco em Finan칞as",
                "description": "Template para organiza칞칚o financeira",
                "domains": ["finances", "productivity"]
            }
        ],
        "count": 2
    }
    ```
    """
    try:
        templates = await legacy_agent.template_matcher.list_all_templates()
        return {
            "templates": templates,
            "count": len(templates)
        }
    except Exception as e:
        logger.error(f"Erro ao listar templates: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/user/{user_id}/plan")
async def get_user_plan(
    user_id: str,
    db_service: DatabaseService = Depends(get_db_service)
):
    """
    Recupera o plano de um usu치rio espec칤fico
    
    Este endpoint busca o plano personalizado gerado para um usu치rio espec칤fico
    no banco de dados.
    
    **Par칙metros:**
    - **user_id**: ID 칰nico do usu치rio
    
    **Retorna:**
    - **GeneratedPlan**: Plano personalizado do usu치rio
    
    **C칩digos de erro:**
    - **404**: Plano n칚o encontrado para o usu치rio
    - **500**: Erro interno do servidor
    """
    try:
        plan = await db_service.get_user_plan(user_id)
        if not plan:
            raise HTTPException(status_code=404, detail="Plano n칚o encontrado")
        return plan
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Erro ao recuperar plano: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/user/{user_id}/profile")
async def get_user_profile(
    user_id: str,
    db_service: DatabaseService = Depends(get_db_service)
):
    """
    Recupera a an치lise de perfil de um usu치rio espec칤fico
    
    Este endpoint busca a an치lise de perfil gerada durante o onboarding
    para um usu치rio espec칤fico.
    
    **Par칙metros:**
    - **user_id**: ID 칰nico do usu치rio
    
    **Retorna:**
    - **ProfileAnalysis**: An치lise detalhada do perfil do usu치rio
    
    **C칩digos de erro:**
    - **404**: An치lise de perfil n칚o encontrada
    - **500**: Erro interno do servidor
    """
    try:
        profile = await db_service.get_profile_analysis(user_id)
        if not profile:
            raise HTTPException(status_code=404, detail="An치lise de perfil n칚o encontrada")
        return profile
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Erro ao recuperar perfil: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/user/{user_id}/recommendations")
async def get_user_recommendations(
    user_id: str,
    domain: Optional[LifeDomain] = None,
    agno_agent: AgnoOnboardingAgent = Depends(get_agno_agent)
):
    """
    Obt칠m recomenda칞칫es personalizadas para o usu치rio usando Agno
    
    Este endpoint gera recomenda칞칫es personalizadas baseadas no hist칩rico
    e perfil do usu치rio, usando a mem칩ria do agente Agno.
    
    **Par칙metros:**
    - **user_id**: ID 칰nico do usu치rio
    - **domain**: (Opcional) Dom칤nio espec칤fico para filtrar recomenda칞칫es
    
    **Retorna:**
    - **Dict**: Recomenda칞칫es personalizadas organizadas por dom칤nio
    
    **Exemplo de resposta:**
    ```json
    {
        "healthness": [
            {
                "type": "habit",
                "title": "Medita칞칚o matinal",
                "description": "Baseado no seu perfil, recomendamos medita칞칚o",
                "priority": "high"
            }
        ],
        "productivity": [
            {
                "type": "routine", 
                "title": "Planejamento semanal",
                "description": "Organize sua semana aos domingos",
                "priority": "medium"
            }
        ]
    }
    ```
    """
    try:
        recommendations = await agno_agent.get_user_recommendations(
            user_id=user_id,
            domain=domain
        )
        return recommendations
    except Exception as e:
        logger.error(f"Erro ao obter recomenda칞칫es: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/user/{user_id}/memory")
async def get_user_memory_summary(
    user_id: str,
    agno_agent: AgnoOnboardingAgent = Depends(get_agno_agent)
):
    """
    Obt칠m um resumo da mem칩ria do usu치rio no Agno
    
    Este endpoint retorna um resumo das informa칞칫es armazenadas
    na mem칩ria do agente Agno para um usu치rio espec칤fico.
    
    **Par칙metros:**
    - **user_id**: ID 칰nico do usu치rio
    
    **Retorna:**
    - **Dict**: Resumo da mem칩ria do usu치rio
    
    **Exemplo de resposta:**
    ```json
    {
        "user_id": "user123",
        "total_entries": 15,
        "last_updated": "2024-01-15T10:30:00Z",
        "domains": ["healthness", "productivity"],
        "key_insights": [
            "Usu치rio prefere atividades matinais",
            "Tem dificuldade com consist칡ncia"
        ]
    }
    ```
    """
    try:
        memory_summary = await agno_agent.get_memory_summary(user_id)
        return memory_summary
    except Exception as e:
        logger.error(f"Erro ao obter resumo da mem칩ria: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/user/{user_id}/update-plan")
async def update_user_plan(
    user_id: str,
    updates: Dict[str, Any],
    agno_agent: AgnoOnboardingAgent = Depends(get_agno_agent)
):
    """
    Atualiza um plano existente do usu치rio usando Agno
    
    Este endpoint permite atualizar um plano existente com base em
    feedback do usu치rio ou mudan칞as de circunst칙ncias.
    
    **Par칙metros:**
    - **user_id**: ID 칰nico do usu치rio
    - **updates**: Dicion치rio com as atualiza칞칫es a serem aplicadas
    
    **Retorna:**
    - **GeneratedPlan**: Plano atualizado
    
    **Exemplo de request:**
    ```json
    {
        "habits": [
            {
                "id": "habit1",
                "difficulty": 3
            }
        ],
        "routines": [
            {
                "time": "08:00",
                "activity": "Exerc칤cio matinal"
            }
        ]
    }
    ```
    """
    try:
        updated_plan = await agno_agent.update_user_plan(
            user_id=user_id,
            updates=updates
        )
        return updated_plan
    except Exception as e:
        logger.error(f"Erro ao atualizar plano: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/status")
async def get_service_status():
    """
    Obt칠m o status geral do servi칞o
    
    Este endpoint retorna informa칞칫es sobre o status atual do servi칞o,
    incluindo vers칚o, funcionalidades dispon칤veis e timestamp.
    
    **Retorna:**
    - **Dict**: Status completo do servi칞o
    
    **Exemplo de resposta:**
    ```json
    {
        "service": "onboarding-agent",
        "version": "1.0.0",
        "status": "operational",
        "features": {
            "agno_agent": true,
            "legacy_agent": true,
            "memory": true,
            "postgres": true
        },
        "timestamp": "2024-01-15T10:30:00Z"
    }
    ```
    """
    return {
        "service": "onboarding-agent",
        "version": "1.0.0",
        "status": "operational",
        "features": {
            "agno_agent": True,
            "legacy_agent": True,
            "memory": True,
            "postgres": True
        },
        "timestamp": datetime.now().isoformat()
    }
