#!/usr/bin/env python3
"""
Script de diagn√≥stico detalhado de importa√ß√£o para Meu Nutri API
"""

import os
import sys
import importlib
import importlib.util
import traceback

def print_section(title):
    """Imprime um cabe√ßalho de se√ß√£o."""
    print(f"\n{'=' * 50}")
    print(title)
    print('=' * 50)

def get_absolute_project_path():
    """Obt√©m o caminho absoluto do projeto."""
    return os.path.abspath(os.path.dirname(__file__))

def configure_python_path():
    """Configura o Python Path."""
    project_path = get_absolute_project_path()
    
    # Adiciona o diret√≥rio do projeto ao Python Path
    if project_path not in sys.path:
        sys.path.insert(0, project_path)
    
    print_section("Configura√ß√£o do Python Path")
    print("Caminhos de importa√ß√£o:")
    for path in sys.path:
        print(f"  - {path}")

def diagnose_module_import(module_name):
    """
    Tenta importar um m√≥dulo e fornece diagn√≥stico detalhado.
    
    :param module_name: Nome do m√≥dulo a ser importado
    :return: Tupla (sucesso, mensagem)
    """
    try:
        # Primeiro, tenta a importa√ß√£o padr√£o
        print(f"\nTentando importar: {module_name}")
        module = importlib.import_module(module_name)
        print(f"‚úì Importa√ß√£o bem-sucedida: {module_name}")
        return True, "Importa√ß√£o bem-sucedida"
    
    except ImportError as e:
        print(f"‚úó Falha na importa√ß√£o de {module_name}")
        print(f"Erro de importa√ß√£o: {e}")
        
        # Diagn√≥stico adicional
        try:
            # Tenta encontrar o m√≥dulo manualmente
            project_path = get_absolute_project_path()
            module_path = os.path.join(project_path, *module_name.split('.'))
            
            # Tenta v√°rias extens√µes de arquivo
            possible_files = [
                f"{module_path}.py", 
                os.path.join(module_path, "__init__.py")
            ]
            
            found_files = [f for f in possible_files if os.path.exists(f)]
            
            if found_files:
                print("Arquivos encontrados:")
                for f in found_files:
                    print(f"  - {f}")
                
                # Tenta carregar o m√≥dulo usando importlib
                spec = importlib.util.spec_from_file_location(module_name, found_files[0])
                module = importlib.util.module_from_spec(spec)
                spec.loader.exec_module(module)
                print(f"‚úì M√≥dulo carregado usando importlib: {module_name}")
                return True, "M√≥dulo carregado via importlib"
            else:
                print(f"‚úó Nenhum arquivo encontrado para {module_name}")
                return False, "Arquivo do m√≥dulo n√£o encontrado"
        
        except Exception as detailed_error:
            print(f"‚úó Erro detalhado ao tentar importar {module_name}")
            print(traceback.format_exc())
            return False, str(detailed_error)

def list_project_files():
    """Lista os arquivos do projeto para diagn√≥stico."""
    print_section("Estrutura de Arquivos do Projeto")
    
    project_path = get_absolute_project_path()
    
    def print_dir_contents(path, indent=""):
        try:
            for item in os.listdir(path):
                full_path = os.path.join(path, item)
                if os.path.isdir(full_path):
                    print(f"{indent}üìÅ {item}/")
                    # Evita loops em diret√≥rios como venv
                    if item not in ['venv', '__pycache__']:
                        print_dir_contents(full_path, indent + "  ")
                else:
                    print(f"{indent}üìÑ {item}")
        except Exception as e:
            print(f"{indent}Erro ao listar {path}: {e}")

    print_dir_contents(project_path)

def main():
    """Fun√ß√£o principal de diagn√≥stico."""
    print_section("Diagn√≥stico de Importa√ß√£o - Meu Nutri API")
    
    # Configura o Python Path
    configure_python_path()
    
    # M√≥dulos a serem verificados
    modules_to_check = [
        'app',
        'app.main',
        'app.api',
        'app.api.routers',
        'app.api.routers.agent_router',
        'app.api.routers.vision_router',
        'app.api.routers.circadian_router',
        'app.api.routers.users_router'
    ]
    
    # Diagn√≥stico de importa√ß√£o para cada m√≥dulo
    print_section("Verifica√ß√£o de Importa√ß√£o de M√≥dulos")
    for module in modules_to_check:
        diagnose_module_import(module)
    
    # Lista os arquivos do projeto
    list_project_files()

if __name__ == "__main__":
    main()
