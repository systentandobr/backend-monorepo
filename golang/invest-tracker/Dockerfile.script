# Dockerfile que executa script de build personalizado
# Segue as melhores práticas do Go para produção

# Estágio 1: Build
FROM golang:1.23-alpine AS builder

# Instalar dependências do sistema
RUN apk add --no-cache git ca-certificates tzdata make bash

# Configurar diretório de trabalho
WORKDIR /app

# Copiar go.mod e go.sum primeiro (para cache de dependências)
COPY golang/invest-tracker/go.mod golang/invest-tracker/go.sum ./

# Download dependências
RUN go mod download

# Copiar código fonte
COPY golang/invest-tracker/ .

# Copiar e executar script de build
COPY golang/invest-tracker/build-and-deploy.sh ./
RUN chmod +x ./build-and-deploy.sh

# Executar script de build personalizado
RUN ./build-and-deploy.sh

# Copiar binário compilado para localização padrão
RUN cp ./bin/api /invest-tracker-api

# Estágio 2: Runtime (imagem mínima)
FROM alpine:latest

# Instalar dependências mínimas
RUN apk --no-cache add ca-certificates tzdata curl

# Criar usuário não-root para segurança
RUN addgroup -g 1001 -S appgroup && \
    adduser -S appuser -u 1001 -G appgroup

# Configurar diretório de trabalho
WORKDIR /app

# Copiar binário compilado
COPY --from=builder /invest-tracker-api .

# Configurar permissões
RUN chown -R appuser:appgroup /app && \
    chmod +x ./invest-tracker-api

# Mudar para usuário não-root
USER appuser

# Expor porta
EXPOSE 7777

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:7777/health || exit 1

# Variáveis de ambiente
ENV PORT=7777
ENV GIN_MODE=release

# Comando de inicialização
CMD ["./invest-tracker-api"]
