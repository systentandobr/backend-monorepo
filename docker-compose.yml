version: '3.8'

services:
  # ===========================================
  # BACKEND MONOREPO - SERVIÇOS AGRUPADOS
  # ===========================================
  backend-monorepo:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: backend-monorepo
    ports:
      # Node.js Services
      - "3000:3000"  # APIs (NestJS)
      - "3001:3001"  # Catalog Products
      
      # Python Services
      - "8000:8000"  # Meu Nutri (FastAPI)
      
      # Go Services
      - "8080:8080"  # Invest Tracker
      - "8081:8081"  # Zen Launcher
      - "8082:8082"  # Catalog Structure
      - "8083:8083"  # Business
    environment:
      # Node.js Environment
      - NODE_ENV=production
      - PORT=3000
      
      # Python Environment
      - PYTHONPATH=/app/services/python/meu-nutri
      - PYTHONUNBUFFERED=1
      
      # Go Environment
      - GIN_MODE=release
      
      # Database URLs (ajustar conforme necessário)
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/meu_nutri
      - MONGODB_URI=mongodb://mongodb:27017
      - REDIS_URL=redis://redis:6379
      
      # External APIs (ajustar conforme necessário)
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./logs:/app/logs
      - ./configs:/app/configs
    depends_on:
      - postgres
      - mongodb
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - backend-network

  # ===========================================
  # BANCOS DE DADOS
  # ===========================================
  postgres:
    image: postgres:14-alpine
    container_name: postgres-db
    environment:
      POSTGRES_DB: meu_nutri
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./python/meu-nutri/database_setup.sql:/docker-entrypoint-initdb.d/01-setup.sql
      - ./python/meu-nutri/seed_database.sql:/docker-entrypoint-initdb.d/02-seed.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d meu_nutri"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  mongodb:
    image: mongo:6.0
    container_name: mongodb-db
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: backend_monorepo
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  redis:
    image: redis:7-alpine
    container_name: redis-cache
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  # ===========================================
  # FERRAMENTAS DE DESENVOLVIMENTO
  # ===========================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@backend.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - backend-network

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: mongodb://admin:password@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin
    ports:
      - "8081:8081"
    depends_on:
      - mongodb
    networks:
      - backend-network

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8082:8081"
    depends_on:
      - redis
    networks:
      - backend-network

  # ===========================================
  # MONITORAMENTO
  # ===========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deploy/configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - backend-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deploy/configs/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./deploy/configs/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - backend-network

# ===========================================
# VOLUMES
# ===========================================
volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ===========================================
# NETWORKS
# ===========================================
networks:
  backend-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 