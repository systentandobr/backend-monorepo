// package telemetry

// import (
// 	"context"
// 	"fmt"
// 	"time"

// 	"github.com/prometheus/client_golang/prometheus"
// 	"github.com/systentandobr/life-tracker/backend/invest-tracker/pkg/common/logger"
// 	"go.opentelemetry.io/otel"
// 	"go.opentelemetry.io/otel/exporters/otlp/otlptrace"
// 	"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc"
// 	"go.opentelemetry.io/otel/propagation"
// 	"go.opentelemetry.io/otel/sdk/resource"
// 	sdktrace "go.opentelemetry.io/otel/sdk/trace"
// 	semconv "go.opentelemetry.io/otel/semconv/v1.4.0"
// )

// // Config holds configuration for telemetry
// type Config struct {
// 	ServiceName    string
// 	Environment    string
// 	EnableMetrics  bool
// 	EnableTracing  bool
// 	CollectorURL   string
// 	SamplingRatio  float64
// }

// // Client represents a telemetry client
// type Client struct {
// 	logger        logger.Logger
// 	tracer        sdktrace.TracerProvider
// 	config        Config
// 	MetricsRegistry *prometheus.Registry
	
// 	// Custom metrics
// 	RequestCounter      *prometheus.CounterVec
// 	RequestDuration     *prometheus.HistogramVec
// 	DatabaseOperations  *prometheus.CounterVec
// 	DatabaseLatency     *prometheus.HistogramVec
// 	JobExecution        *prometheus.CounterVec
// 	JobDuration         *prometheus.HistogramVec
// }

// // NewClient creates a new telemetry client
// func NewClient(config Config, logger logger.Logger) (*Client, error) {
// 	client := &Client{
// 		logger: logger,
// 		config: config,
// 	}
	
// 	// Initialize metrics if enabled
// 	if config.EnableMetrics {
// 		if err := client.initMetrics(); err != nil {
// 			return nil, fmt.Errorf("failed to initialize metrics: %w", err)
// 		}
// 	}
	
// 	// Initialize tracing if enabled
// 	if config.EnableTracing {
// 		if err := client.initTracing(); err != nil {
// 			return nil, fmt.Errorf("failed to initialize tracing: %w", err)
// 		}
// 	}
	
// 	return client, nil
// }

// // initMetrics initializes Prometheus metrics
// func (c *Client) initMetrics() error {
// 	c.logger.Info("Initializing metrics")
	
// 	// Create a new registry
// 	c.MetricsRegistry = prometheus.NewRegistry()
	
// 	// Initialize request metrics
// 	c.RequestCounter = prometheus.NewCounterVec(
// 		prometheus.CounterOpts{
// 			Name: "http_requests_total",
// 			Help: "Total number of HTTP requests",
// 		},
// 		[]string{"method", "path", "status"},
// 	)
	
// 	c.RequestDuration = prometheus.NewHistogramVec(
// 		prometheus.HistogramOpts{
// 			Name:    "http_request_duration_seconds",
// 			Help:    "HTTP request duration in seconds",
// 			Buckets: prometheus.DefBuckets,
// 		},
// 		[]string{"method", "path"},
// 	)
	
// 	// Initialize database metrics
// 	c.DatabaseOperations = prometheus.NewCounterVec(
// 		prometheus.CounterOpts{
// 			Name: "database_operations_total",
// 			Help: "Total number of database operations",
// 		},
// 		[]string{"operation", "collection"},
// 	)
	
// 	c.DatabaseLatency = prometheus.NewHistogramVec(
// 		prometheus.HistogramOpts{
// 			Name:    "database_operation_duration_seconds",
// 			Help:    "Database operation duration in seconds",
// 			Buckets: prometheus.DefBuckets,
// 		},
// 		[]string{"operation", "collection"},
// 	)
	
// 	// Initialize job metrics
// 	c.JobExecution = prometheus.NewCounterVec(
// 		prometheus.CounterOpts{
// 			Name: "job_executions_total",
// 			Help: "Total number of job executions",
// 		},
// 		[]string{"job", "status"},
// 	)
	
// 	c.JobDuration = prometheus.NewHistogramVec(
// 		prometheus.HistogramOpts{
// 			Name:    "job_execution_duration_seconds",
// 			Help:    "Job execution duration in seconds",
// 			Buckets: prometheus.DefBuckets,
// 		},
// 		[]string{"job"},
// 	)
	
// 	// Register all metrics with the registry
// 	c.MetricsRegistry.MustRegister(c.RequestCounter)
// 	c.MetricsRegistry.MustRegister(c.RequestDuration)
// 	c.MetricsRegistry.MustRegister(c.DatabaseOperations)
// 	c.MetricsRegistry.MustRegister(c.DatabaseLatency)
// 	c.MetricsRegistry.MustRegister(c.JobExecution)
// 	c.MetricsRegistry.MustRegister(c.JobDuration)
	
// 	return nil
// }

// // initTracing initializes OpenTelemetry tracing
// func (c *Client) initTracing() error {
// 	c.logger.Info("Initializing tracing")
	
// 	// Default collector URL if not specified
// 	collectorURL := c.config.CollectorURL
// 	if collectorURL == "" {
// 		collectorURL = "localhost:4317"
// 	}
	
// 	// Configure the exporter
// 	ctx := context.Background()
	
// 	// Create OTLP exporter
// 	traceExporter, err := otlptrace.New(
// 		ctx,
// 		otlptracegrpc.NewClient(
// 			otlptracegrpc.WithEndpoint(collectorURL),
// 			otlptracegrpc.WithInsecure(),
// 		),
// 	)
// 	if err != nil {
// 		return fmt.Errorf("failed to create trace exporter: %w", err)
// 	}
	
// 	// Create resource
// 	res, err := resource.New(ctx,
// 		resource.WithAttributes(
// 			semconv.ServiceNameKey.String(c.config.ServiceName),
// 			semconv.ServiceVersionKey.String("v1.0.0"),
// 			semconv.DeploymentEnvironmentKey.String(c.config.Environment),
// 		),
// 	)
// 	if err != nil {
// 		return fmt.Errorf("failed to create resource: %w", err)
// 	}
	
// 	// Configure sampling ratio
// 	samplingRatio := c.config.SamplingRatio
// 	if samplingRatio <= 0 {
// 		samplingRatio = 0.1 // Default 10% sampling
// 	}
	
// 	// Create trace provider
// 	c.tracer = sdktrace.NewTracerProvider(
// 		sdktrace.WithBatcher(traceExporter),
// 		sdktrace.WithResource(res),
// 		sdktrace.WithSampler(sdktrace.TraceIDRatioBased(samplingRatio)),
// 	)
	
// 	// Set global trace provider
// 	otel.SetTracerProvider(c.tracer)
	
// 	// Set global propagator
// 	otel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(
// 		propagation.TraceContext{},
// 		propagation.Baggage{},
// 	))
	
// 	return nil
// }

// // RecordHTTPRequest records metrics for an HTTP request
// func (c *Client) RecordHTTPRequest(method, path string, status int, duration time.Duration) {
// 	if c.config.EnableMetrics {
// 		c.RequestCounter.WithLabelValues(method, path, fmt.Sprintf("%d", status)).Inc()
// 		c.RequestDuration.WithLabelValues(method, path).Observe(duration.Seconds())
// 	}
// }

// // RecordDatabaseOperation records metrics for a database operation
// func (c *Client) RecordDatabaseOperation(operation, collection string, duration time.Duration) {
// 	if c.config.EnableMetrics {
// 		c.DatabaseOperations.WithLabelValues(operation, collection).Inc()
// 		c.DatabaseLatency.WithLabelValues(operation, collection).Observe(duration.Seconds())
// 	}
// }

// // RecordJobExecution records metrics for a job execution
// func (c *Client) RecordJobExecution(jobName, status string, duration time.Duration) {
// 	if c.config.EnableMetrics {
// 		c.JobExecution.WithLabelValues(jobName, status).Inc()
// 		c.JobDuration.WithLabelValues(jobName).Observe(duration.Seconds())
// 	}
// }

// // Shutdown gracefully shuts down the telemetry client
// func (c *Client) Shutdown(ctx context.Context) error {
// 	if c.config.EnableTracing && c.tracer != nil {
// 		if err := c.tracer.Shutdown(ctx); err != nil {
// 			return fmt.Errorf("failed to shutdown tracer: %w", err)
// 		}
// 	}
	
// 	return nil
// }